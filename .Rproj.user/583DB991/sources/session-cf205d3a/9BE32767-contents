---
title: "R per l'analisi statistica multivariata"
subtitle: "Unità C: i `data.frame`s"
author: "[Tommaso Rigon]{.orange}"
institute: "_Università degli Studi di Milano-Bicocca_"
execute:
  cache: false
filters: 
  - remove-pause.lua
format:
  revealjs:
    auto-stretch: true
    center: true
    html-math-method: katex
    transition: none
    output-file: un_C_slides.html
    slide-number: true
    callout-appearance: minimal
    code-line-numbers: true
    theme: [default, ../template.css] # alternative themes (subset): default, night, dark
    embed-resources: false
    echo: true
    fig-dpi: 200
    # incremental: true  # Remove comment if you like incremental bullet points
    logo: img/logoB.png
    footer: "[Home page](https://tommasorigon.github.io/introR)"
    highlight-style: github
  html:
    html-math-method: katex
    echo: true
    callout-appearance: minimal
    theme: [cosmo, ../template.css]
    toc: true
    toc-title: Table of contents
    embed-resources: false
    code-line-numbers: true
    smooth-scroll: true
    code-fold: false
    code-summary: "Show the code"
    fig-dpi: 200
    highlight-style: github
editor: 
  markdown: 
    wrap: 72
editor_options: 
  chunk_output_type: console
---


## Unità C

-   L'oggetto `data.frame`
-   Importazione di un dataset in memoria
-   Esplorazione e manipolazione di un dataset
-   Tipologia di variabili
-   I valori mancanti

::: callout-note
#### Nota

Esercizi **R** associati disponibili a [questo link](https://tommasorigon.github.io/introR/exe/es_1.html)
:::

## Gli oggetti di tipo `data.frame`

Un oggetto **R** chiamato `data.frame` corrisponde alla **matrice dei dati**.

Ciascuna riga rappresenta quindi un'**unità statistica**, mentre ciascuna colonna rappresenta invece una **variabile**.

. . .

Un `data.frame` assomiglia ad una matrice (`matrix`), ma è pensato per l'analisi dei dati.

Ad esempio, un `data.frame` può contenere anche valori non numerici, come per esempio le **variabili qualitative** o **valori mancanti**.

Come vedremo, il `data.frame` viene generalmente caricato all'interno di **R** utilizzando ad esempio la funzione `read.table`.

## Importazione di un dataset

Il modo più frequente di caricare un dataset in memoria è importarlo da un **file esterno**.

Se i dati hanno dimensioni piccole / medie (dimensione file $<$ 3-4 Gb), sono spesso salvati in formato `.csv` oppure `.txt`.

In contesti reali e più complessi, è possibile importare i dati a partire direttamente da database relazionali come **SQL**.

. . .

È sconsigliabile importare i dati in **R** a partire da un file Excel. Più in generale, ci sono svariate ragioni per evitare Excel se l'obiettivo è condurre una rigorosa analisi dei dati.

. . .

::: callout-note
#### Nota

Per poter procedere con i prossimi comandi, è necessario scaricare il file `calcio.csv` e salvarlo nel proprio computer. [Link al file](../dataset/calcio.csv).
:::

## I dati grezzi (editor di testo)

![](img/data.png)

## La cartella di lavoro

La sessione di **R** attiva è aperta in una specifica **cartella di lavoro**, identificata dal comando `getwd`.

Ad esempio, la cartella in cui il codice è stato eseguito è la seguente

```{r}
getwd() # Identifica la cartella di lavoro (get working directory)
```

. . .

Per aprire il file `calcio.csv`, bisogna fornire ad **R** il **percorso del file**, che dipende da dove questo è stato salvato (sul Desktop, cartella downloads, etc).

```{r}
# LA VARIABILE PATH VA CAMBIATA A SECONDA DI DOVE SIA SALVATO IL FILE .csv NEL PROPRIO PC
path <- "../dataset/calcio.csv" # Questo è il percorso del file, relativo a getwd()
```

. . .

Il percorso del file può anche essere un **link**, come in questo caso:

```{r}
path <- "https://tommasorigon.github.io/introR/dataset/calcio.csv"
```

## Importazione del dataset

È anche possibile **cambiare la cartella di lavoro** tramite il comando `setwd`.

In Rstudio, si può usare l'opzione *More -\> Set as working directory* nella finestra *Files*, selezionando la cartella di interesse.

Una volta identificato il corretto *path* del file, per **importare il dataset** in memoria si usa ad esempio il comando `read.table`. Pertanto:

```{r}
calcio <- read.table(path, header = TRUE, sep = ",")
```

. . .

::: callout-note
#### Nota

-   L'opzione `header = TRUE` significa che la prima riga contiene i nomi delle variabili.
-   L'opzione `sep = ","` indica che i vari valori di ciascuna variabile sono separati da una virgola.
:::

. . .

Infine, si noti che nel caso in cui il file sia contenuto nella cartella di lavoro, è quindi sufficiente usare:

```{r}
#| eval: false
calcio <- read.table("calcio.csv", header = TRUE, sep = ",")
```

## Esplorazione di un `data.frame`

In primo luogo, siamo interessati a capire quante **variabili** e quante **osservazioni** sono contenute nel dataset `data.frame`:

```{r}
dim(calcio) # Equivalente a c(nrow(calcio), ncol(calcio))
```

. . .

Per verificare di non aver commesso errori grossolani nell'importazione del `data.frame`, possiamo visualizzare le prime $6$ osservazioni con il comando `head`:

```{r}
head(calcio) # Comando equivalente: calcio[1:6, ]
```

. . .

Il comando `tail` può essere usato per mostrare le ultime $6$ osservazioni:

```{r}
tail(calcio) # Comando equivalente: calcio[1895:1900, ]
```

## Il dataset `calcio`

Il dataset calcio contiene quindi un totale di $7$ variabili. Ciascuna osservazione è una **partita di calcio** avvenuta nel campionato di **serie A** dal 2008 al 2015.

. . .

-   La variabile `Date` indica la data della partita.
-   Le variabili `HomeTeam`, `AwayTeam` indicano la squadra che ha giocato in casa ed in trasferta, rispettivamente.
-   La variabile `FTR` ("*Full Time Result*") indica se la partita è stata vinta dalla squadra di casa (`H`), dalla squadra in trasferta (`A`), o si è conclusa con un pareggio (`D`).
-   Le variabili `B365H`, `B365D` e `B365A`, indicano le quote della compagnia di scommesse *Bet365 Group Ltd* relative ai 3 eventi, prima dell'inizio della partita.

. . .

Per **accedere** e **modificare** i nomi delle variabili, si utilizza il comando `colnames`.

```{r}
colnames(calcio) # Per accedere ai nomi delle variabili
```

## Tipologia di variabili

In un dataset sono presenti diverse **tipologie di variabili**.

. . .

Le variabili quantitative discrete e continue in **R** sono codificate come oggetti di tipo `integer` e `numeric`, rispettivamente.

. . .

Le variabili qualitative in **R** sono codificate come oggetti di tipo `character` oppure di tipo `factor`; la differenza tra queste tipologie verrà chiarita nelle prossime slides.

Infine, le date in **R** si codificano con la tipologia `Date`.

. . .

::: callout-note
#### Nota

**R** non sempre riconosce correttamente la tipologia di variabili, come evidenziato dal comando `str`, che fornisce un sommario del `data.frame`.

```{r}
str(calcio)
```
:::

## Variabili quantitative

Per **estrarre una variabile** da un `data.frame` si procede come nel caso delle liste, ovvero tramite il simbolo `$`. Le variabili possono essere salvate con un nome a piacere.

. . .

Una variabile numerica è un vettore **R** a tutti gli effetti, pertanto possiamo applicare le funzioni che abbiamo già incontrato finora

```{r}
is.numeric(calcio$B365H) # Verifico che si tratta di una variabile di tipo numeric
class(calcio$B365H)
calcio$B365H[1:10] # Primi 10 elementi di un vettore R
```

. . .

Le **analisi descrittive** di una variabile numerica verranno affrontate nelle unità successive, per ora ci limitiamo alla manipolazione del `data.frame`.

## Variabili qualitative I

Le variabili di tipo `character` sono appropriate per le stringhe di testo, ovvero se ciascun campo corrisponde ad un breve testo, come ad esempio un *Tweet*.

Le variabili qualitative con valori ripetuti vanno invece codificate come `factor`.

Dobbiamo quindi **convertire** le $3$ variabili `HomeTeam`, `AwayTeam` e `FTR` come segue:

```{r}
calcio$HomeTeam <- factor(calcio$HomeTeam)
calcio$AwayTeam <- factor(calcio$AwayTeam)
calcio$FTR <- factor(calcio$FTR)
```

. . .

In alternativa, possiamo fare questa operazione in fase di lettura di dati, tramite l'opzione `stringsAsFactors`. Quindi:

```{r}
calcio <- read.table(path, header = TRUE, sep = ",", stringsAsFactors = TRUE)
```

## Variabili qualitative II

In primo luogo, verifichiamo che la conversione sia avvenuta correttamente ed esploriamone il contenuto della variabile `HomeTeam`:

. . .

Nelle variabili di tipo `factor` sono pertanto elencate le varie `modalità`, chiamati `levels` in **R**.

. . .

Per accedere alle modalità si usa il comando `levels`, che elenca le modalità della variabile considerata in ordine alfabetico:

```{r}
levels(calcio$HomeTeam)
```

## Variabili qualitative III

Il comando `levels` permette di **rinominare le modalità**, ad esempio:

```{r}
calcio$FTR[1:10]
levels(calcio$FTR) <- c("Away", "Draw", "Home") # Rinomino le modalità
calcio$FTR[1:10]
```

. . .

Il comando `levels` consente inoltre di accorpare le modalità di una variabile qualitativa:

```{r}
calcio$Draw <- calcio$FTR # Creo una copia della variabile FTR chiamata Draw
levels(calcio$Draw) <- c("Not_Draw", "Draw", "Not_Draw") # Accorpamento delle modalità

calcio$Draw[1:10]
```

## Le variabili di tipo `date`

La variabile `Date` del dataset `calcio` rappresenta una data e pertanto va codificata come tale.

. . .

In **R** la conversione viene eseguita dal comando `as.Date`, seguita dal **formato** in cui è espressa la data:

```{r}
calcio$Date <- as.Date(calcio$Date, format = "%Y-%m-%d")
class(calcio$Date)
calcio$Date[1:10]
```

. . .

Una volta convertito in formata `Date`, è possibile svolgere alcune operazioni aggiuntive. Ad esempio:

```{r}
min(calcio$Date) # Prima partita giocata
max(calcio$Date) # Ultima partita giocata
```

## Manipolazione di un dataset

Per **selezionare le righe** di un dataset si procede come nel caso delle matrici:

```{r}
calcio[c(1806, 501, 109), ]
```

. . .

È ovviamente possibile (e tipicamente molto più utile) selezionare le osservazioni che soddisfino una determinata **condizione**.

. . .

Supponiamo ad esempio di voler identificare le partite terminate con un pareggio:

```{r}
calcio_draw <- calcio[calcio$FTR == "Draw", ]
head(calcio_draw)
```

## I valori mancanti

Supponiamo di voler identificare le partite in cui la squadra di casa ha una bassa probabilità di vittoria secondo *Bet365*:

```{r}
calcio_home <- calcio[calcio$B365H > 9, ]
calcio_home
```

::: callout-important
Qualcosa è andato storto: ci sono dei simboli (`NA`) che non avevamo incontrato finora.
:::

La ragione per cui il comando produce dei risultati apparentemente strani è dovuto alla presenza di alcuni **dati mancanti**, codificati come `NA` (*Not Available*).

In particolare, ci sono $3$ osservazioni (la $1501$, $1846$ e la $1848$) i cui valori relativi a *Bet365* non sono disponibili.

```{r}
calcio[rowSums(is.na(calcio)) > 0, ] # Identifica le righe con valori mancanti
```

. . .

La funzione `is.na` produce una matrice **logica** della stessa dimensione di **calcio**, contenente `TRUE` se il valore è mancante e `FALSE` altrimenti.

. . .

La funzione `rowSums(matrice)` produce un vettore i cui valori alla somma degli elementi di ciascuna riga della `matrice`.

Di conseguenza, `rowSums(is.na(calcio))` indica quanti valori mancanti sono presenti in ciascuna riga.

## Gestire i dati mancanti

La gestione statistica dei dati mancanti non è tra gli obiettivi di questo corso.

La soluzione più facile, sebbene potenzialmente molto pericolosa, consistente semplicemente nel **rimuovere** le righe incomplete tramite il comando `na.omit`:

```{r}
calcio_no_na <- na.omit(calcio)
dim(calcio_no_na)
```

. . .

Per risolvere il problema originario, ovvero identificare le partite in cui la squadra di casa ha bassa probabilità di vittoria, si può usare `subset`:

```{r}
calcio_home <- subset(calcio, subset = B365H > 9)
calcio_home
```

## Selezione delle variabili

Il comando `subset` può essere usato sia per **selezionare le righe** (osservazioni) che per **selezionare le colonne** (variabili).

. . .

Nel secondo caso, si può procedere tramite l'opzione `select`:

```{r}
calcio_B365 <- subset(calcio, select = c(B365H, B365D, B365A))
head(calcio_B365)
```

Ovviamente è possibile anche selezionare \empr{contemporaneamente} sia le righe che le colonne.

## Il comando `attach`

In **R** esiste un comando chiamato `attach`. Sebbene usato da molti, questo comando è **diabolico** e sarebbe meglio evitare di utilizzarlo.

. . .

Il comando `attach(dataframe)` consente di utilizzare le variabili di un `data.frame` come se queste fossero presenti nel workspace.

Questa pratica tuttavia rende il codice molto meno leggibile e spesso conduce ad errori di varia natura.

. . .

Nonostante le varie proteste a favore della rimozione di `attach` da parte di alcuni, questo comando continua a (r)esistere e viene tuttora usato da molti.

In questo corso non verranno forniti esempi di utilizzo di `attach` per evitare di indurre lo studente in tentazione.

## Sommario

A seguito di tutte queste operazioni, il dataset risulta molto modificato rispetto alla sua versione iniziale.

Ri-eseguendo il comando `str` otteniamo infatti che

```{r}
str(calcio)
```

## Il banco vince sempre

Nelle scommesse calcistiche le **quote** rappresentano l'inverso della probabilità di un evento, per cui $$
    (\text{Probabilità dell'evento}) = \frac{1}{(\text{Quota dell'evento})}
    $$

. . .

La quota rappresenta inoltre l'ammontare in € che il vincitore riceve a fronte del pagamento dell'importo unitario di $1$€.

. . .

Ad esempio, scommettendo $10$€ sulla vittoria della Juventus nella partita contro il Chievo del 30 Agosto 2014, si sarebbero ottenuti $15$€, dato che la quota era di $1.50$.

. . .

Se la scommessa fosse equa, le probabilità di vittoria, pareggio e sconfitta dovrebbero sommare ad $1$.

Tuttavia, questo non accade: le probabilità ottenute sommano ad un valore $>1$. Tale discrepanza si chiama **allibramento** o **aggio** e garantisce al banco un guadagno.

## Esercizio riassuntivo

-   Si ottenga la variabile `aggio`, ottenuta come la differenza tra la somma delle "probabilità" dei $3$ eventi (vittoria, pareggio, sconfitta) ed $1$, ovvero il caso equo.

-   Si dica qual è l'aggio associato alla partita Udinese-Parma del 1 Settembre 2013.

-   Si dica in quali partite è stato applicato il più basso ed il più alto aggio e si identifichino tali valori.

-   In quale partita è stato applicato l'aggio più alto nel campionato di Serie A del 2009/2010?

::: callout-tip
#### Suggerimento

Si usino i comandi `which.min` e `which.max`. Si consulti la documentazione per capirne il funzionamento.
:::

#### Soluzione

```{r}
# Calcolo dell'aggio
calcio$aggio <- 1 / calcio$B365H + 1 / calcio$B365D + 1 / calcio$B365A - 1

# Aggio associato a Udinese-Parma del 1 Settembre 2013
subset(calcio, Date == "2013-09-01" & HomeTeam == "Udinese")

# Minimo e massimo aggio
calcio[which.min(calcio$aggio), ]
calcio[which.max(calcio$aggio), ]

# Il campionato di Serie A inizia a fine Agosto e finisce a fine Maggio
calcio2009_2010 <- subset(calcio, Date <= "2009-08-15" & Date <= "2010-06-15")
calcio2009_2010[which.max(calcio2009_2010$aggio), ]
```

2+2
## exams ----------------------------------------------------------------------------
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022")
## load package
library("exams")
## PRELIMINARY QUESTIONS FOR THE EXAMS
Exam <- c(
"ES_1.Rmd",
"ES_2.Rmd",
"ES_3.Rmd"
)
exams2pdf(Exam,
name = "ASM_R_26_07_2022", dir = "output",
edir = "exercises", template = "templates/plain.tex"
)
# exams2html("exercises/ES_1.Rmd")
# exams2html("exercises/ES_2.Rmd")
# exams2html("exercises/ES_3.Rmd")
## exams ----------------------------------------------------------------------------
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022")
## load package
library("exams")
## PRELIMINARY QUESTIONS FOR THE EXAMS
Exam <- c(
"ES_1.Rmd",
"ES_2.Rmd",
"ES_3.Rmd"
)
exams2pdf(Exam,
name = "ASM_R_26_09_2022", dir = "output",
edir = "exercises", template = "templates/plain.tex"
)
# exams2html("exercises/ES_1.Rmd")
# exams2html("exercises/ES_2.Rmd")
# exams2html("exercises/ES_3.Rmd")
source("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022/moodle-questions.R", echo=TRUE)
## exams ----------------------------------------------------------------------------
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022")
## load package
library("exams")
## PRELIMINARY QUESTIONS FOR THE EXAMS
Exam <- c(
"ES_1.Rmd",
"ES_2.Rmd",
"ES_3.Rmd"
)
exams2pdf(Exam,
name = "ASM_R_26_09_2022", dir = "output",
edir = "exercises", template = "templates/plain.tex"
)
# exams2html("exercises/ES_1.Rmd")
# exams2html("exercises/ES_2.Rmd")
# exams2html("exercises/ES_3.Rmd")
## exams ----------------------------------------------------------------------------
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022")
## load package
library("exams")
## PRELIMINARY QUESTIONS FOR THE EXAMS
Exam <- c(
"ES_1.Rmd",
"ES_2.Rmd",
"ES_3.Rmd"
)
exams2pdf(Exam,
name = "ASM_R_26_09_2022", dir = "output",
edir = "exercises", template = "templates/plain.tex"
)
# exams2html("exercises/ES_1.Rmd")
# exams2html("exercises/ES_2.Rmd")
# exams2html("exercises/ES_3.Rmd")
## exams ----------------------------------------------------------------------------
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022")
## load package
library("exams")
## PRELIMINARY QUESTIONS FOR THE EXAMS
Exam <- c(
"ES_1.Rmd",
"ES_2.Rmd",
"ES_3.Rmd"
)
exams2pdf(Exam,
name = "ASM_R_26_09_2022", dir = "output",
edir = "exercises", template = "templates/plain.tex"
)
# exams2html("exercises/ES_1.Rmd")
# exams2html("exercises/ES_2.Rmd")
# exams2html("exercises/ES_3.Rmd")
## exams ----------------------------------------------------------------------------
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022")
## load package
library("exams")
## PRELIMINARY QUESTIONS FOR THE EXAMS
Exam <- c(
"ES_1.Rmd",
"ES_2.Rmd",
"ES_3.Rmd"
)
exams2pdf(Exam,
name = "ASM_R_26_09_2022", dir = "output",
edir = "exercises", template = "templates/plain.tex"
)
# exams2html("exercises/ES_1.Rmd")
# exams2html("exercises/ES_2.Rmd")
# exams2html("exercises/ES_3.Rmd")
## exams ----------------------------------------------------------------------------
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/ESAMI/ASM_R_26_09_2022")
## load package
library("exams")
## PRELIMINARY QUESTIONS FOR THE EXAMS
Exam <- c(
"ES_1.Rmd",
"ES_2.Rmd",
"ES_3.Rmd"
)
exams2pdf(Exam,
name = "ASM_R_26_09_2022", dir = "output",
edir = "exercises", template = "templates/plain.tex"
)
# exams2html("exercises/ES_1.Rmd")
# exams2html("exercises/ES_2.Rmd")
# exams2html("exercises/ES_3.Rmd")
stirling2=function(n,k){
j=0:k
1/factorial(k)*sum((-1)^(k-j)*choose(k,j)*j^n)}
bell=function(n){
s1=0
for (k in 1:n) {
s1=s1+stirling2(n,k)
}
s1
}
stirling2(10,5)
bell(10)
dsn=function(x, alpha){
2* dnorm(x)* pnorm(alpha*x)}
curve(dsn(x,-6),-4,4)
curve(dsn(x,0),-4,4,add = T,col="red")
curve(dsn(x,6),-4,4,add = T,col="blue")
library(HNRMI)
rdir(1, alpha = c(1, 1))
rdir(1, alpha = c(10, 1))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(10, 0.01))
rdir(1, alpha = c(100, 0.01))
rdir(1, alpha = c(100, 0.01))
rdir(1, alpha = c(100, 0.01))
rdir(1, alpha = c(100, 0.01), log_scale = TRUE)
rdir(1, alpha = c(100, 0.01), log_scale = TRUE)
rdir(1, alpha = c(100, 0.01), log_scale = TRUE)
rdir(1, alpha = c(100, 0.01), log_scale = TRUE)
rdir(10, alpha = c(100, 0.01), log_scale = TRUE)
rdir(10, alpha = c(100, 0.2), log_scale = TRUE)
rdir(10, alpha = c(1, 0.2), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
rdir(10, alpha = c(25, 0.10), log_scale = TRUE)
install.packages("loo")
library(loo)
? loo::loo()
example_loglik_array()
example_loglik_matrix()
? example_loglik_matrix()
2 + 2
4 * (3 + 5) # La somma entro parentesi viene eseguita per prima
pi / 4 # Pi greco quarti
2 + 2
4 * (3 + 5) # La somma entro parentesi viene eseguita per prima
pi / 4 # Pi greco quarti
3.  Analisi Esplorativa (AE), 6 CFU, IV Ciclo, Prof. Monti.
breaks <- 18 * (0:10) # Definizione degli intervalli. Usiamo 10 intervalli di lunghezza 18.
breaks <- 18 * (0:10) # Definizione degli intervalli. Usiamo 10 intervalli di lunghezza 18.
dde_preterm_class <- cut(dde_preterm, breaks = breaks)
styler:::style_active_file()
dde <- read.table("../dataset/calcio.csv", header = TRUE, sep = ",")
dde <- read.table("../dataset/calcio.csv", header = TRUE, sep = ",")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/University/Bicocca/Didattica/Laboratorio Statistica/introR/lezioni")
dde <- read.table("../dataset/calcio.csv", header = TRUE, sep = ",")
#| eval: false
dde <- read.table("https://tommasorigon.github.io/introR/dataset/dde.csv",
header = TRUE, sep = ",") # Scarica il file da internet
str(dde)
dde_preterm <- dde$DDE[dde$GAD < 37 * 7] # Gruppo parto prematuro
dde_non_preterm <- dde$DDE[dde$GAD >= 37 * 7] # Gruppo parto non prematuro
length(dde_preterm) # Numerosità campionaria gruppo 1
length(dde_non_preterm) # Numerosità campionaria gruppo 2
str(dde)
dde <- read.table("../dataset/dde.csv", header = TRUE, sep = ",")
str(dde)
dde_preterm <- dde$DDE[dde$GAD < 37 * 7] # Gruppo parto prematuro
dde_non_preterm <- dde$DDE[dde$GAD >= 37 * 7] # Gruppo parto non prematuro
length(dde_preterm) # Numerosità campionaria gruppo 1
length(dde_non_preterm) # Numerosità campionaria gruppo 2
#| eval: false
path <- "https://tommasorigon.github.io/introR/data/emoglobina.csv"
emoglobina <- read.table(path, header = TRUE, sep = ",", stringsAsFactors = TRUE)
emoglobina <- read.table("../dataset/emoglobina.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
str(emoglobina)
emoglobina <- read.table("../dataset/emoglobina.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
str(emoglobina)
emo_A <- emoglobina$emoglobina[emoglobina$Metodologia == "A"] # Emoglobina gruppo A
emo_B <- emoglobina$emoglobina[emoglobina$Metodologia == "B"] # Emoglobina gruppo B
summary(emo_A)
summary(emo_B)
boxplot(emoglobina$emoglobina ~ emoglobina$Metodologia,
ylab = "Emoglobina",
xlab = "Metodologia"
)
mean((emo_A - mean(emo_A))^2) # Varianza del gruppo A
mean((emo_B - mean(emo_B))^2) # Varianza del gruppo B
mean(emo_A^2) - mean(emo_A)^2 # Varianza del gruppo A, formula alternativa
mean(emo_B^2) - mean(emo_B)^2  # Varianza del gruppo B, formula alternativa
my_var <- function(x) {
mean(x^2) - mean(x)^2
}
my_var(emo_A)
my_var(emo_B)
# Chunk 1
emoglobina <- read.table("../dataset/emoglobina.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
# Chunk 3
str(emoglobina)
# Chunk 4
emo_A <- emoglobina$emoglobina[emoglobina$Metodologia == "A"] # Emoglobina gruppo A
emo_B <- emoglobina$emoglobina[emoglobina$Metodologia == "B"] # Emoglobina gruppo B
summary(emo_A)
summary(emo_B)
# Chunk 5
boxplot(emoglobina$emoglobina ~ emoglobina$Metodologia,
ylab = "Emoglobina",
xlab = "Metodologia"
)
# Chunk 6
mean((emo_A - mean(emo_A))^2) # Varianza del gruppo A
mean((emo_B - mean(emo_B))^2) # Varianza del gruppo B
mean(emo_A^2) - mean(emo_A)^2 # Varianza del gruppo A, formula alternativa
mean(emo_B^2) - mean(emo_B)^2 # Varianza del gruppo B, formula alternativa
# Chunk 7
my_var <- function(x) {
mean(x^2) - mean(x)^2
}
my_var(emo_A)
my_var(emo_B)
# Chunk 8
var(emo_A)
var(emo_B)
# Chunk 9
my_sd <- function(x) {
sqrt(my_var(x))
}
my_sd(emo_A)
my_sd(emo_B)
sd(emo_A)
sd(emo_B)
# Chunk 10
max(emo_A) - min(emo_A)
max(emo_B) - min(emo_B)
diff(range(emo_A))
diff(range(emo_B))
# Chunk 11
interquartile_range <- function(x){
diff(quantile(x, probs = c(0.25, 0.75)))
}
interquartile_range(emo_A)
interquartile_range(emo_B)
# Chunk 12
MAD <- function(x) {
median(abs(x - median(x)))
}
# Chunk 13
MAD(emo_A)
MAD(emo_B)
# Chunk 14
tapply(emoglobina$emoglobina, emoglobina$Metodologia, mean)
with(emoglobina, tapply(emoglobina, Metodologia, mean)) # In maniera ancora più compatta
# Chunk 15
tab <- rbind(with(emoglobina, tapply(emoglobina, Metodologia, my_var)),
with(emoglobina, tapply(emoglobina, Metodologia, my_sd)),
with(emoglobina, tapply(emoglobina, Metodologia, interquartile_range)),
with(emoglobina, tapply(emoglobina, Metodologia, MAD)))
rownames(tab) <- c("Varianza", "Deviazione Standard", "Scarto interquartile", "MAD")
tab
# Prima possibile implementazione
asym <- function(x){
sqm <- sqrt(mean(x^2) - mean(x)^2)
mean((x - mean(x))^3) / sqm^3
}
# Implementazione (leggermente) alternativa
asym <- function(x){
sqm <- sqrt(mean(x^2) - mean(x)^2)
z <- (x - mean(x)) / sqm
mean(z^3)
}
asym(emo_A)
forbes <- read.table("../dataset/forbes.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
forbes
forbes <- read.table("../dataset/forbes.csv", header = TRUE, sep = ",")
install.packages(c("BDgraph", "blob", "brew", "Brobdingnag", "broom", "bslib", "callr", "car", "checkmate", "chron", "cli", "cluster", "commonmark", "cpp11", "crayon", "cubature", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "devtools", "digest", "dotCall64", "dplyr", "DT", "dtplyr", "emmeans", "evaluate", "expint", "farver", "fields", "fontawesome", "forcats", "foreign", "GA", "gargle", "generics", "gert", "ggforce", "ggraph", "ggsignif", "gh", "gitcreds", "googlesheets4", "graphlayouts", "gtable", "gtools", "gtrendsR", "haven", "hms", "htmltools", "httpuv", "httr", "igraph", "IRkernel", "isoband", "jsonlite", "knitr", "lifecycle", "lme4", "lpSolve", "maps", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mcclust", "mclust", "mgcv", "minqa", "mnormt", "modelr", "nlme", "nloptr", "nnet", "openssl", "packrat", "pbdZMQ", "pillar", "pkgload", "polyclip", "processx", "ps", "purrr", "quantreg", "R.cache", "R.methodsS3", "R.oo", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reprex", "reticulate", "rlang", "rmarkdown", "roxygen2", "rpart", "rprojroot", "rsconnect", "rstan", "rstudioapi", "rversions", "rvest", "sass", "scales", "shiny", "shinyWidgets", "sm", "sn", "sp", "spam", "splines2", "statmod", "stringi", "stringr", "styler", "survival", "sys", "terra", "testthat", "tibble", "tictoc", "tidygraph", "tidyr", "tidyselect", "tidyverse", "timechange", "tinytex", "tsibble", "tweenr", "usethis", "uuid", "vctrs", "vegan", "viridisLite", "vroom", "xfun", "xts", "yaml", "zip", "zoo"))
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
titanic <- read.table("../dataset/titanic.csv", header = TRUE, sep = ",")
titanic <- read.table("../dataset/titanic.csv", header = TRUE, sep = ",")
str(titanic)
summary(titanic)
titanic <- read.table("../dataset/titanic.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
titanic <- read.table(path, header = TRUE, sep = ",", stringsAsFactors = TRUE)
#| eval: false
path <- "https://tommasorigon.github.io/introR/data/titanic.csv"
titanic <- read.table(path, header = TRUE, sep = ",", stringsAsFactors = TRUE)
str(titanic)
summary(titanic)
freq_abs_classe <- table(titanic$Classe)
freq_rel_classe <- freq_abs_classe / sum(freq_abs_classe)
tab_summary <- cbind(freq_abs_classe, freq_rel_classe)
tab_summary
titanic <- read.table("../dataset/titanic.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
str(titanic)
summary(titanic)
freq_abs_classe <- table(titanic$Classe)
freq_rel_classe <- freq_abs_classe / sum(freq_abs_classe)
tab_summary <- cbind(freq_abs_classe, freq_rel_classe)
tab_summary
tab <- table(titanic$Salvato, titanic$Classe)
tab
addmargins(tab) # Aggiunge le distribuzioni marginali (assolute)
tab_rel <- prop.table(tab) # Comando alternativo: table(tab) / sum(tab)
tab_rel
addmargins(tab_rel) # Aggiunge le distribuzioni marginali relative
chi_squared <- function(x, y) {
nn <- table(x, y)
n <- sum(nn)
ff <- nn / n # Frequenze relative congiunte
f_x <- table(x) / n # Frequenze relative marginali di x
f_y <- table(y) / n # Frequenze relative marginali di y
S <- 0
for (i in 1:length(f_x)) {
for (j in 1:length(f_y)) {
S <- S + ff[i, j]^2 / (f_x[i] * f_y[j])
}
}
n * (S - 1)
}
chi_squared(titanic$Salvato, titanic$Classe)
# Chunk 1
n <- 10 # Numero di tentativi
p <- 0.6 # Probabilità di successo
k <- 4 # Numero di successi
choose(n, k) * p^k * (1 - p)^(n - k)
# Chunk 2
dbinom(k, size = n, prob = p)
# Chunk 3
sum(dbinom(0:5, size = n, prob = p))
pbinom(5, size = n, prob = p) # Funzione specifica di R
styler:::style_active_file()
kk <- 0:n
prob <- dbinom(0:n, size = n, prob = p)
plot(kk, prob, type = "h", main = "Bin(10,0.6)", xlab = "k", ylab = "P(X=k)")
x <- 1 # Punto in cui calcolare f(x)
mu <- 3 # Media
sigma2 <- 10 # Varianza
1 / sqrt(2 * pi * sigma2) * exp(-1 / (2 * sigma2) * (x - mu)^2)
dnorm(x, mean = 3, sd = sqrt(sigma2))
x <- 1 # Punto in cui calcolare f(x)
mu <- 3 # Media
sigma2 <- 10 # Varianza
1 / sqrt(2 * pi * sigma2) * exp(-1 / (2 * sigma2) * (x - mu)^2)
dnorm(x, mean = 3, sd = sqrt(sigma2))
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
curve(cos(50 * x) + sin(20 * x))
curve((cos(50 * x) + sin(20 * x))^2)
curve((cos(50 * x) + sin(20 * x))^2, n = 200)
curve((cos(50 * x) + sin(20 * x))^2, n = 400)

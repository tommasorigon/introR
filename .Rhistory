x
x.sort()
x
x <- np.array([2, 3, 1, 3, 10, 5])
x.prod()
x.cumprod()
x.std()
np.sort(x)
x
x <- np.array([2, 3, 1, 3, 10, 5])
x.prod()
x.cumprod()
y = np.sort(x)
x
y
x <- np.array([2, 3, 1, 3, 10, 5])
x.prod()
x.cumprod()
x = np.array([2, 3, 1, 3, 10, 5])
x.prod()
x.cumprod()
x
y = np.sort(x)
y
np.sort(x)
x
x.min()
x.argmin() # Posizione del valore corrispondente al minimo
x
x.min()
x.argmin() # Posizione del valore corrispondente al minimo
x.max() # Valore massimo
x.argmax() # Posizione del valore corrispondente al massimo
# Chunk 1
2 + 2
4 * (3 + 5) # La somma entro parentesi viene eseguita per prima
# Chunk 2
from numpy import pi
pi / 4 # Pi greco quarti
# Chunk 3
2**5
# Chunk 4
import numpy as np
np.sqrt(2)
np.sin(pi / 4)
# Chunk 5
# Assegna il valore 5 all'oggetto x
x = np.sqrt(5)
# Chunk 6
y = x + pi # ovvero pi greco + radice quadrata di 5
y
# Chunk 7
del x # x non è più presente nel "workspace"
# Chunk 8
dir() # Nel workspace è presente l'oggetto y
# Chunk 9
x = 1/2 # Esempio di numero reale
# Chunk 10
np.exp(x) # Esponenziale e logaritmo naturale
np.log(x)
# Chunk 11
np.abs(x) # Valore assoluto
np.sign(x) # Funzione segno
# Chunk 12
np.sin(x) # Funzioni trigonometriche (seno, coseno, tangente)
np.cos(x)
np.tan(x)
# Chunk 13
x = 1 / 2; y = 1 / 3 # Numeri reali
n = 5; k = 2 # Numeri naturali
# Chunk 14
import scipy.special as scp
scp.factorial(n) # n!
scp.binom(n, k) # Coefficiente binomiale
# Chunk 15
round(x, ndigits = 2) # Arrotonda x usando 2 cifre decimali
np.floor(x) # Arrotonda x all'intero più vicino, per difetto
np.ceil(x) # Arrotonda x all'intero più vicino, per eccesso
# Chunk 16
scp.gamma(x) # Funzione gamma
# Chunk 17
scp.beta(x, y) # Funzione beta
# Chunk 18
# Documentazione della funzione log
# Chunk 19
10**15
10**(-15)
# Chunk 20
np.sin(pi)
# Chunk 21
np.cos(pi)
# Chunk 22
x = 5
x < 0 # Controlla se il valore di x è minore di 0
a = (x == -3) # Controlla se il valore di x è uguale a -3
a
# Chunk 23
a = True; b = False; x = 5; y = 7
x >= y # Controlla se x è maggiore o uguale a y (Si usa "<=" per minore uguale)
x != y # Controlla se x è diverso da y
a & b # a AND b. Controlla se i valori booleani a e b sono entrambi veri
a | b # a OR b. Controlla se Almeno uno tra a ed b è vero
# Chunk 24
x = [4, 2, 2, 8, 10]
x
# Chunk 25
x = ["A", "B", 2, 8, 10]
x
# Chunk 26
import numpy as np
x = np.array([4, 2, 2, 8, 10])
x
# Chunk 27
x = np.arange(5, 11) # Equivalente a: x = np.array([5, 6, 7, 8, 9, 10])
x
# Chunk 28
x = np.linspace(start = 0, stop = 1, num = 20)
x
# Chunk 29
x = 10 * np.ones(7) # Vettore in cui il numero 10 è ripetuto 7 volte
x
x = np.zeros(7) # Vettore in cui il numero 0 è ripetuto 7 volte
x
# Chunk 30
x = np.linspace(0, 4, 10)
np.exp(x) + x / 2 + 1 # Esempio 1
# Chunk 31
x = np.array([10, 10**2, 10**3, 10**4, 10**5, 10**6]) # Esempio 2
np.log10(x)
# Chunk 32
x = np.linspace(0, 10, 10)
x > 4 # Esempio 3
# Chunk 33
x = np.array([2, 3, 1, 3, 10, 5])
len(x) # Lunghezza del vettore
# Chunk 34
np.sum(x) # Somma degli elementi del vettore
np.cumsum(x) # Somme cumulate
# Chunk 35
# Una sintassi alternativa
x.sum()
x.cumsum()
# Chunk 36
x = np.array([2, 3, 1, 3, 10, 5])
x.prod()
x.cumprod()
# Chunk 37
x.min()
x.argmin() # Posizione del valore corrispondente al minimo
x.max() # Valore massimo
x.argmax() # Posizione del valore corrispondente al massimo
np.sort(x)
x.sort()
x
np.arcsin(x) # Funzioni trigonometriche (seno, coseno, tangente)
# Chunk 1
2 + 2
4 * (3 + 5) # La somma entro parentesi viene eseguita per prima
# Chunk 2
from numpy import pi
pi / 4 # Pi greco quarti
# Chunk 3
2**5
# Chunk 4
import numpy as np
np.sqrt(2)
np.sin(pi / 4)
# Chunk 5
# Assegna il valore 5 all'oggetto x
x = np.sqrt(5)
# Chunk 6
y = x + pi # ovvero pi greco + radice quadrata di 5
y
# Chunk 7
del x # x non è più presente nel "workspace"
# Chunk 8
dir() # Nel workspace è presente l'oggetto y
# Chunk 9
x = 1/2 # Esempio di numero reale
# Chunk 10
np.exp(x) # Esponenziale e logaritmo naturale
np.log(x)
# Chunk 11
np.abs(x) # Valore assoluto
np.sign(x) # Funzione segno
# Chunk 12
np.sin(x) # Funzioni trigonometriche (seno, coseno, tangente)
np.cos(x)
np.tan(x)
np.arcsin(x) # Funzioni trigonometriche (seno, coseno, tangente)
np.arccos(x)
np.arctan(x)
x
x = np.array([1, 2, 3])
y = np.array([4, 5, 6])
(x, y)
np.concatenate(x, y)
np.concatenate([x, y])
[x, y]
x <- np.concatenate([pi * np.ones(2), np.sqrt(2), np.array([10, 7]))
x <- np.concatenate([pi * np.ones(2), np.sqrt(2), np.array([10, 7])])
[pi * np.ones(2), np.sqrt(2), np.array([10, 7])]
x <- np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])])
[pi * np.ones(2), np.array([np.sqrt(2), 10, 7])]
np.array([np.sqrt(2), 10, 7])
pi * np.ones(2)
x <- np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])], axis = None)
x <- np.append([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])])
x <- np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])], axis = 1)
x <- np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])], axis = 0)
x <- np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])], axis = 1)
x <- np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])], axis = 0)
x <- np.concatenate(pi * np.ones(2), np.array([np.sqrt(2), 10, 7]))
x <- np.concatenate((pi * np.ones(2), np.array([np.sqrt(2), 10, 7])))
x = np.repeat(10, 7) # Vettore in cui il numero 10 è ripetuto 7 volte
x
x = np.zeros(7) # Vettore in cui il numero 0 è ripetuto 7 volte
x
x = np.repeat(10., 7) # Vettore in cui il numero 10 è ripetuto 7 volte
x
x = np.zeros(7) # Vettore in cui il numero 0 è ripetuto 7 volte
x
# Concatenazione di vettori
np.concatenate([x, y])
x = np.hstack((pi * np.ones(2), np.array([np.sqrt(2), 10, 7])))
x[3] # Estrae il terzo elemento dal vettore x, ovvero sqrt(2)
x[c(1, 3, 5)] # Estrae il primo, il terzo ed il quinto elemento
x[-c(1, 3, 5)] # Elimina il primo, il terzo ed il quinto elemento
x[x > 3.5] # Estrae gli elementi maggiori di 3.5
x = np.hstack([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])])
x
np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])])
x[3] # Estrae il terzo elemento dal vettore x, ovvero sqrt(2)
x[[1, 3, 5]] # Estrae il primo, il terzo ed il quinto elemento
x[[0, 2, 4]] # Estrae il primo, il terzo ed il quinto elemento
x[-[0, 2, 4)] # Elimina il primo, il terzo ed il quinto elemento
x[-[0, 2, 4] # Elimina il primo, il terzo ed il quinto elemento
]
x[-[0, 2, 4]] # Elimina il primo, il terzo ed il quinto elemento
x[-1]
x[1]
x[0]
x
np.delete(x, [0, 2, 4]) # Elimina il primo, il terzo ed il quinto elemento
x
x[x > 3.5] # Estrae gli elementi maggiori di 3.5
x > 3.5
#| fig-width: 12
#| fig-height: 5.5
import matplotlib.pyplot as plt
# 100 linearly spaced numbers
x = np.linspace(0, 15, 100)
# the function, which is y = x^2 here
y = sin(x) / x
# setting the axes at the centre
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.spines['left'].set_position('center')
ax.spines['bottom'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
# plot the function
plt.plot(x,y, 'r')
# show the plot
plt.show()
curve(, from = 0, to = 15)
y = np.sin(x) / x
x = np.linspace(0, 15, 100)
y = np.sin(x) / x
x = np.linspace(1e-15, 15, 100)
y = np.sin(x) / x
# setting the axes at the centre
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.spines['left'].set_position('center')
ax.spines['bottom'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')
# plot the function
plt.plot(x,y, 'r')
# show the plot
plt.show()
y = np.sin(x) / x
plt.plot(x,y, 'r')
plt.show()
#| fig-width: 12
#| fig-height: 5.5
import matplotlib.pyplot as plt
x = np.linspace(1e-15, 15, 100)
y = np.sin(x) / x
plt.plot(x, y, 'r')
plt.show()
#| fig-width: 12
#| fig-height: 5.5
import matplotlib.pyplot as plt
x = np.linspace(1e-15, 15, 200)
y = np.sin(x) / x
plt.plot(x, y, 'r')
plt.show()
A <- np.array([5, 1], [2, 4])
A = np.array([5, 1], [2, 4])
A = np.array([[5, 1], [2, 4]])
A
A = np.array([[5, 2], [1, 4]])
A
A = np.array([[5, 2], [1, 4]])
A
A = np.array([[5, 2], [1, 4]])
A
A[1, 2] # Estrazione di elemento in posizione (1,2)
A[0, 1] # Estrazione di elemento in posizione (1,2)
A[:, 1] # Estrazione seconda colonna
A[0, :] # Estrazione prima riga
A.ndim
A.ndim()
A.ndim
len(A)
# Chunk 1
2 + 2
4 * (3 + 5) # La somma entro parentesi viene eseguita per prima
# Chunk 2
from numpy import pi
pi / 4 # Pi greco quarti
# Chunk 3
2**5
# Chunk 4
import numpy as np
np.sqrt(2)
np.sin(pi / 4)
# Chunk 5
# Assegna il valore 5 all'oggetto x
x = np.sqrt(5)
# Chunk 6
y = x + pi # ovvero pi greco + radice quadrata di 5
y
# Chunk 7
del x # x non è più presente nel "workspace"
# Chunk 8
dir() # Nel workspace è presente l'oggetto y
# Chunk 9
x = 1/2 # Esempio di numero reale
# Chunk 10
np.exp(x) # Esponenziale e logaritmo naturale
np.log(x)
# Chunk 11
np.abs(x) # Valore assoluto
np.sign(x) # Funzione segno
# Chunk 12
np.sin(x) # Funzioni trigonometriche (seno, coseno, tangente)
np.cos(x)
np.tan(x)
# Chunk 13
np.arcsin(x) # Funzioni trigonometriche (seno, coseno, tangente)
np.arccos(x)
np.arctan(x)
# Chunk 14
x = 1 / 2; y = 1 / 3 # Numeri reali
n = 5; k = 2 # Numeri naturali
# Chunk 15
import scipy.special as scp
scp.factorial(n) # n!
scp.binom(n, k) # Coefficiente binomiale
# Chunk 16
round(x, ndigits = 2) # Arrotonda x usando 2 cifre decimali
np.floor(x) # Arrotonda x all'intero più vicino, per difetto
np.ceil(x) # Arrotonda x all'intero più vicino, per eccesso
# Chunk 17
scp.gamma(x) # Funzione gamma
# Chunk 18
scp.beta(x, y) # Funzione beta
# Chunk 19
# Documentazione della funzione log
# Chunk 20
10**15
10**(-15)
# Chunk 21
np.sin(pi)
# Chunk 22
np.cos(pi)
# Chunk 23
x = 5
x < 0 # Controlla se il valore di x è minore di 0
a = (x == -3) # Controlla se il valore di x è uguale a -3
a
# Chunk 24
a = True; b = False; x = 5; y = 7
x >= y # Controlla se x è maggiore o uguale a y (Si usa "<=" per minore uguale)
x != y # Controlla se x è diverso da y
a & b # a AND b. Controlla se i valori booleani a e b sono entrambi veri
a | b # a OR b. Controlla se Almeno uno tra a ed b è vero
# Chunk 25
x = [4, 2, 2, 8, 10]
x
# Chunk 26
x = ["A", "B", 2, 8, 10]
x
# Chunk 27
import numpy as np
x = np.array([4, 2, 2, 8, 10])
x
# Chunk 28
x = np.arange(5, 11) # Equivalente a: x = np.array([5, 6, 7, 8, 9, 10])
x
# Chunk 29
x = np.linspace(start = 0, stop = 1, num = 20)
x
# Chunk 30
x = np.repeat(10., 7) # Vettore in cui il numero 10 è ripetuto 7 volte
x
x = np.zeros(7) # Vettore in cui il numero 0 è ripetuto 7 volte
x
# Chunk 31
x = np.linspace(0, 4, 10)
np.exp(x) + x / 2 + 1 # Esempio 1
# Chunk 32
x = np.array([10, 10**2, 10**3, 10**4, 10**5, 10**6]) # Esempio 2
np.log10(x)
# Chunk 33
x = np.linspace(0, 10, 10)
x > 4 # Esempio 3
# Chunk 34
x = np.array([2, 3, 1, 3, 10, 5])
len(x) # Lunghezza del vettore
# Chunk 35
np.sum(x) # Somma degli elementi del vettore
np.cumsum(x) # Somme cumulate
# Chunk 36
# Una sintassi alternativa
x.sum()
x.cumsum()
# Chunk 37
x = np.array([2, 3, 1, 3, 10, 5])
x.prod()
x.cumprod()
# Chunk 38
x.min()
x.argmin() # Posizione del valore corrispondente al minimo
# Chunk 39
x.max() # Valore massimo
x.argmax() # Posizione del valore corrispondente al massimo
# Chunk 40
np.sort(x)
# Chunk 41
x.sort()
x
# Concatenazione di vettori
x = np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])])
x
x[2] # Estrae il terzo elemento dal vettore x, ovvero sqrt(2)
x[[0, 2, 4]] # Estrae il primo, il terzo ed il quinto elemento
np.delete(x, [0, 2, 4]) # Elimina il primo, il terzo ed il quinto elemento
x[x > 3.5] # Estrae gli elementi maggiori di 3.5
A.reshape(1)
A.shape()
A.shape
A.shape
A.reshape(4, 1)
A.shape
a <- A.reshape(1, 4) # Converte la matrice in un vettore
A
a = A.reshape(1, 4) # Converte la matrice in un vettore
a
a = A.reshape(0, 4) # Converte la matrice in un vettore
a = A.reshape(4) # Converte la matrice in un vettore
a
A
A.transpose()
A.diagonal()
A.diagonal() # Restituisce la diagonale della matrice
A.transpose() # Calcola la matrice trasposta A'
sum(A) # Somma di tutti gli elementi di A
A.sum() # Somma di tutti gli elementi di A
np.exp(A)
C = np.hstack([A, B])
B = A # Creo una matrice B identica ad A, per semplicità
C = np.hstack([A, B])
C
C = np.vstack([A, B])
C
C = np.hstack([A, B])
C
x = np.array([-4, 2, 6, 10, 22])
y = np.array([3, 2, 2, 7, 9])
x * y
x %*% y
dot(x, y)
np.dot(x, y)
x
y
sum(x * y)
np.dot(x, y)
A <- np.array([[1, 2, 3], [4, 9, 2], [2, 2, 2]])
A = np.array([[1, 2, 3], [4, 9, 2], [2, 2, 2]])
B = np.array([[5, 2, 5], [3, 3, 7], [-2, -8, 10]])
A
B
A * B # Prodotto righe per colonne AB
np.dot(A, B) # Prodotto righe per colonne AB
A @ B # Prodotto righe per colonne AB
x @ y
np.matmul(A, B) # Prodotto righe per colonne AB
A * B
A = np.array([[1, 2, 3], [4, 9, 2], [2, 2, 2]])
A1 = np.solve(A) # Matrice inversa di A
A1
A = np.array([[1, 2, 3], [4, 9, 2], [2, 2, 2]])
A1 = np.solve(A) # Matrice inversa di A
reticulate::repl_python()

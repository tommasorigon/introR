# Chunk 1
2 + 2
# Chunk 2
4 * (3 + 5) # La somma entro parentesi viene eseguita per prima
# Chunk 3
from numpy import pi
pi / 4 # Pi greco quarti
# Chunk 4
2**5
# Chunk 5
import numpy as np
np.sqrt(2)
# Chunk 6
np.sin(pi / 4)
# Chunk 7
# Assegna il valore 5 all'oggetto x
x = np.sqrt(5)
# Chunk 8
y = x + pi # ovvero pi greco + radice quadrata di 5
y
# Chunk 9
del x # x non è più presente nel "workspace"
# Chunk 11
x = 1/2 # Esempio di numero reale
# Chunk 12
np.exp(x) # Esponenziale e logaritmo naturale
# Chunk 13
np.log(x)
# Chunk 14
np.abs(x) # Valore assoluto
# Chunk 15
np.sign(x) # Funzione segno
# Chunk 16
np.sin(x) # Funzioni trigonometriche (seno, coseno, tangente)
# Chunk 17
np.cos(x)
# Chunk 18
np.tan(x)
# Chunk 19
np.arcsin(x) # Funzioni trigonometriche (seno, coseno, tangente)
# Chunk 20
np.arccos(x)
# Chunk 21
np.arctan(x)
# Chunk 22
x = 1 / 2; y = 1 / 3 # Numeri reali
n = 5; k = 2 # Numeri naturali
import scipy.special as scp
scp.factorial(n) # n!
scp.binom(n, k) # Coefficiente binomiale
np.around(x, 2) # Arrotonda x usando 2 cifre decimali
np.ceil(x) # Arrotonda x all'intero più vicino, per eccesso
scp.beta(x, y) # Funzione beta
scp.gamma(x) # Funzione gamma
10**15
n <- 10
sum((-1)^(1:n) * (1:n) * choose(n, 1:n))
sum((-1)^(1:n + 1) * (1:n) * choose(n, 1:n))
1:n + 1
(-1)^(1:n + 1)
(-1)^(1:n + 1) * (1:n) * choose(n, 1:n)
(-1)^(1:n) * (1:n) * choose(n, 1:n)
sum((-1)^(1:(n + 1)) * (1:n) * choose(n, 1:n))
n <- 10
id <- 1:(n + 1)
sum((-1)^(1:id) * (1:id) * choose(n, 1:id))
n <- 10
id <- 1:(n + 1)
sum((-1)^(1:id) * (1:id) * choose(n, 1:id))
n <- 10
dist_euclid <- function(x, y) {
sqrt(crossprod(x - y))
}
dist_euclid <- function(x, y) {
sqrt(crossprod(x - y))
}
x <- rnorm(10)
y <- rnorm(10)
dist_euclid(x, y)
sqrt(sum(x-y)^2))
sqrt(sum(x-y)^2)
sqrt(sum((x-y)^2))
library(microbenchm)
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(dist_euclid(x,y ))
microbenchmark(dist_euclid(x, y), sqrt(sum((x-y)^2)))
microbenchmark(dist_euclid(x, y), sqrt(sum((x-y)^2)))
microbenchmark(dist_euclid(x, y), sqrt(sum((x-y)^2)))
microbenchmark(sqrt(crossprod(x - y)), sqrt(sum((x-y)^2)))
microbenchmark(sqrt(crossprod(x - y)), sqrt(sum((x-y)^2)))
microbenchmark(sqrt(crossprod(x - y)), sqrt(sum((x-y)^2)))
microbenchmark(sqrt(crossprod(x - y)), sqrt(sum((x-y)^2)))

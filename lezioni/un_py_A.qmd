---
title: "R per l'analisi statistica multivariata"
subtitle: "Unità A: calcolo scientifico ed algebra lineare"
author: "Tommaso Rigon"
institute: "Università Milano-Bicocca"
editor: visual
execute:
  echo: true
  warning: true
editor_options: 
  chunk_output_type: console
---

## Unità A

-   A-B-C: il software **Python** come calcolatrice scientifica
-   Operazioni di routine: pulizia del *workspace*, simboli speciali
-   Funzioni matematiche, grafico di una funzione, operazioni logiche
-   Operazioni con vettori e matrici

::: callout-note
#### Nota

Esercizi **Python** associati sono diponibili a [questo link](https://tommasorigon.github.io/introR/exe/es_1.html)
:::

## Calcolatrice scientifica

Anzitutto, **Python** può essere usato come se fosse una *calcolatrice scientifica*:

```{python}
2 + 2
```


```{python}
4 * (3 + 5) # La somma entro parentesi viene eseguita per prima
```


```{python}
from numpy import pi
pi / 4 # Pi greco quarti
```

Per calcolare la potenza $a^b$ si usa:

```{python}
2**5
```

Le quantità $\sqrt{2}$ e $\sin(\pi/4)$ si ottengono invece con i comandi:

```{python}
import numpy as np
np.sqrt(2)
```


```{python}
np.sin(pi / 4)
```

::: callout-note
## Nota

Tutto ciò che viene scritto dopo un cancelletto (`#`) è considerato un **commento**.
:::

## Assegnazione di un valore

È possibile **salvare un valore** assegnandolo ad un oggetto tramite il simbolo `=`.

```{python}
# Assegna il valore 5 all'oggetto x
x = np.sqrt(5)
```

Il valore contenuto in `x` può essere successivamente richiamato, modificato e salvato in un nuovo oggetto, chiamato ad esempio `y`.

```{python}
y = x + pi # ovvero pi greco + radice quadrata di 5
y
```

Per **rimuovere un oggetto** dalla memoria, si usa il comando `del`, ovvero *delete*.

```{python}
del x # x non è più presente nel "workspace"
```

::: callout-note
## Nota

**Python** è *case sensitive*, pertanto l'oggetto `x` è diverso dall'oggetto `X`.
:::

## Pulizia del *workspace*

È buona norma mantenere pulito il *workspace*, ovvero l'ambiente di lavoro.

Se un oggetto non è più necessario, è possibile eliminarlo tramite il comando `del`.

È possibile visualizzare la lista di oggetti salvati in memoria tramite il comando seguente:

```{python}
#| eval: false
dir() # Nel workspace è presente l'oggetto y
```

## Alcune funzioni matematiche I

Supponiamo che `x` sia un **numero reale**.

Ciò che seguono sono una lista di funzioni disponibili in **Python**:

```{python}
x = 1/2 # Esempio di numero reale
```

```{python}
np.exp(x) # Esponenziale e logaritmo naturale
```


```{python}
np.log(x)
```

```{python}
np.abs(x) # Valore assoluto
```


```{python}
np.sign(x) # Funzione segno
```

## Alcune funzioni matematiche II

```{python}
np.sin(x) # Funzioni trigonometriche (seno, coseno, tangente)
```


```{python}
np.cos(x)
```


```{python}
np.tan(x)
```

```{python}
np.arcsin(x) # Funzioni trigonometriche (seno, coseno, tangente)
```


```{python}
np.arccos(x)
```


```{python}
np.arctan(x)
```

::: callout-note
## Nota

Le funzioni di **Python** si possono combinare tra loro, ad esempio `np.log(np.abs(x))`.
:::

## Ulteriori funzioni matematiche I

Supponiamo che `x` e `y` siano due **numeri reali**. Inoltre, siano `n` e `k` due **numeri naturali**.

Si noti l'uso del `;` che può essere usato per separare due comandi nella stessa riga.

```{python}
x = 1 / 2; y = 1 / 3 # Numeri reali 
n = 5; k = 2 # Numeri naturali
```

```{python}
import scipy.special as scp
scp.factorial(n) # n!
```


```{python}
scp.binom(n, k) # Coefficiente binomiale
```

```{python}
np.around(x, 2) # Arrotonda x usando 2 cifre decimali
```


```{python}
np.floor(x) # Arrotonda x all'intero più vicino, per difetto
```


```{python}
np.ceil(x) # Arrotonda x all'intero più vicino, per eccesso
```

## Ulteriori funzioni matematiche II

La funzione gamma $\Gamma(x) = \int_0^\infty s^{x-1} e^{-s} d s$ si calcola in **Python** come segue:

```{python}
scp.gamma(x) # Funzione gamma
```

La funzione beta $\mathcal{B}(x,y) = \int_0^1 s^{x-1}(1-s)^{y-1}ds$ si calcola in **Python** come segue:

```{python}
scp.beta(x, y) # Funzione beta
```

## La documentazione ufficiale

La documentazione di **Python** è la principale fonte di informazioni.

A cosa serve una funzione? Qual è la definizione dei suoi argomenti? La risposta va sempre cercata nella **documentazione ufficiale** e non in queste slide.

Il comando `help(funzione)` apre una finestra in cui vengono descritta nel dettaglio una funzione. Esempio:

```{python}
# Documentazione della funzione log
help(np.log) 
```

## Simboli speciali

Numeri molto grandi, come $10^{15}$, e molto piccoli, come $10^{-15}$, in **Python** vengono rappresentati come segue:

```{python}
10**15
```


```{python}
10**(-15)
```

## Errori di approssimazione numerica

È ben noto che $\sin(\pi) = 0$. Tuttavia, in **Python** si ottiene un numero molto vicino a $0$, ma strettamente positivo. Infatti:

```{python}
np.sin(pi)
```

**Python** è uno strumento di calcolo numerico e pertanto sono sempre presenti **errori di approssimazione numerica**.

Fortunatamente, nella maggior parte dei casi pratici la differenza tra $0$ e $10^{-16}$ è del tutto irrilevante.

In altre situazioni, errori di approssimazione numerica possono portare a conclusioni fuorvianti. Occorre quindi fare attenzione e valutare caso per caso.

Ad ogni modo, l'approssimazione numerica potrebbe anche migliorare. Ad esempio:

```{python}
np.cos(pi)
```

## Operazioni logiche

In **Python** è spesso necessario verificare se una o più condizioni sono verificate o meno.

```{python}
x = 5
```


```{python}
x < 0 # Controlla se il valore di x è minore di 0
```


```{python}
a = (x == -3) # Controlla se il valore di x è uguale a -3
a
```

Il valore di `a` è un indicatore **binario** o **booleano**, ovvero può essere vero (`True`) oppure falso (`False`).

Altre **funzioni logiche** disponibili (assumendo che `y` sia un numero e `b` un booleano) sono:

```{python}
a = True; b = False; x = 5; y = 7
x >= y # Controlla se x è maggiore o uguale a y (Si usa "<=" per minore uguale)
```


```{python}
x != y # Controlla se x è diverso da y
```


```{python}
a & b # a AND b. Controlla se i valori booleani a e b sono entrambi veri
```


```{python}
a | b # a OR b. Controlla se Almeno uno tra a ed b è vero
```

## Liste e vettori

Una **lista** in **Python** viene definito tramite la funzione `[]`, come nel seguente esempio:

```{python}
x = [4, 2, 2, 8, 10]
x
```

::: callout-note
## Nota

Con il termine generico "**lista**" in **Python** non si fa riferimento alla nozione dell'algebra lineare ma semplicemente ad una stringa di valori ordinati.
:::

Il seguente oggetto è una **lista** in **Python**, nonostante l'oggetto `x` sia composto sia numeri che da lettere

```{python}
x = ["A", "B", 2, 8, 10]
x
```

## Vettori

Un **vettore** in **Python** viene definito tramite la libreria `numpy` e salvato in un oggetto di tipo `array`, come nel seguente esempio:

```{python}
import numpy as np
x = np.array([4, 2, 2, 8, 10])
x
```

## Creazione di vettori

Talvolta è comodo creare dei vettori i cui elementi sono dei **numeri consecutivi**

```{python}
x = np.arange(5, 11) # Equivalente a: x = np.array([5, 6, 7, 8, 9, 10])
x
```

Per creare una successione di **numeri reali** si usa il comando `linspace`:

```{python}
x = np.linspace(start = 0, stop = 1, num = 20)
x
```

Per creare un vettore di **valori ripetuti** si usa il comando `ones`:

```{python}
x = np.repeat(10., 7) # Vettore in cui il numero 10 è ripetuto 7 volte
x
```


```{python}
x = np.zeros(7) # Vettore in cui il numero 0 è ripetuto 7 volte
x
```

## Operazioni sui vettori I

La maggior parte delle funzioni matematiche di `numpy` sono **vettorizzate**. In altri termini, le funzioni agiscono su tutti gli elementi di un vettore.

```{python}
x = np.linspace(0, 4, 10)
np.exp(x) + x / 2 + 1 # Esempio 1
```

```{python}
x = np.array([10, 10**2, 10**3, 10**4, 10**5, 10**6]) # Esempio 2
np.log10(x)
```

```{python}
x = np.linspace(0, 10, 10)
x > 4 # Esempio 3
```

Altre funzioni invece sono utili proprio nel caso in cui l'**argomento** sia un **vettore**:

```{python}
x = np.array([2, 3, 1, 3, 10, 5])
len(x) # Lunghezza del vettore
```


```{python}
np.sum(x) # Somma degli elementi del vettore
```


```{python}
np.cumsum(x) # Somme cumulate
```

```{python}
# Una sintassi alternativa
x.sum()
```


```{python}
x.cumsum()
```

## Operazioni sui vettori II

Ulteriori semplici operazioni in cui l'argomento è un vettore sono elencate nel seguito:

```{python}
x = np.array([2, 3, 1, 3, 10, 5])
x.prod()
```


```{python}
x.cumprod()
```

```{python}
x.min()
```


```{python}
x.argmin() # Posizione del valore corrispondente al minimo
```

Il funzionamento delle seguenti funzioni dovrebbero essere intuibile da quanto visto finora:

```{python}
x.max() # Valore massimo
```


```{python}
x.argmax() # Posizione del valore corrispondente al massimo
```

Per ordinare un vettore, è possibile usare il comando `sort`:

```{python}
np.sort(x)
```

Attenzione alla alla differenza con la sua sintassi alternativa:

```{python}
x.sort()
x
```

## Operazioni sui vettori III

È possibile **selezionare gli elementi** di un vettore usando le parentesi quadrate, come nei seguenti esempi:

```{python}
# Concatenazione di vettori
x = np.concatenate([pi * np.ones(2), np.array([np.sqrt(2), 10, 7])])
x
```


```{python}
x[2] # Estrae il terzo elemento dal vettore x, ovvero sqrt(2)
```


```{python}
x[[0, 2, 4]] # Estrae il primo, il terzo ed il quinto elemento
```


```{python}
np.delete(x, [0, 2, 4]) # Elimina il primo, il terzo ed il quinto elemento
```


```{python}
x[x > 3.5] # Estrae gli elementi maggiori di 3.5
```

L'ultimo comando suggerisce che gli elementi di un vettore possono essere selezionati tramite una **condizione** relativa al vettore stesso.


## Grafico di una funzione

In **Python** è possibile **disegnare** una qualsiasi funzione tramite il comando `curve`.

Se ad esempio si considera la funzione $$f(x) = \frac{\sin(x)}{x},$$ allora possiamo disegnare $f(x)$ nell'intervallo $(0,15)$ come segue:

```{python}
#| fig-width: 12
#| fig-height: 5.5
import matplotlib.pyplot as plt

x = np.linspace(1e-15, 15, 200)
y = np.sin(x) / x

plt.plot(x, y, 'r')
plt.show()
```

## Matrici

Una **matrice** ${\bf A}$ è una collezione di elementi $(a)_{ij}$ per $i=1,\dots,n$ e $j=1,\dots,m$.

Per esempio, la matrice quadrata di dimensione $2 \times 2$

$${\bf A} = \begin{pmatrix}
5 & 2\\
1 & 4 \\
\end{pmatrix},$$ si può definire in **Python** tramite il comando `matrix` come segue:

```{python}
A = np.array([[5, 2], [1, 4]])
A
```

## Operazioni sulle matrici I

È possibile **selezionare gli elementi** di una matrice in maniera analoga a quanto fatto con i vettori.

```{python}
A[0, 1] # Estrazione di elemento in posizione (1,2)
```


```{python}
A[:, 1] # Estrazione seconda colonna
```


```{python}
A[0, :] # Estrazione prima riga
```

Alcuni **comandi di base** per manipolare le matrici sono i seguenti

```{python}
A.shape
```


```{python}
a = A.reshape(4) # Converte la matrice in un vettore
a
```

```{python}
A.diagonal() # Restituisce la diagonale della matrice
```


```{python}
A.transpose() # Calcola la matrice trasposta A'
```


```{python}
A.sum() # Somma di tutti gli elementi di A
```

## Operazioni sulle matrici II

Come per i vettori, le operazioni elementari (somma, prodotto, `log`, `exp`, etc.) vengono eseguite **elemento per elemento**.

```{python}
np.exp(A)
```

Siano ${\bf A}$ e ${\bf B}$ due matrici aventi lo stesso numero di colonne e definiamo

$$
{\bf C} = \begin{pmatrix}{\bf A} \\ {\bf B} \end{pmatrix}.
$$

```{python}
B = A # Creo una matrice B identica ad A, per semplicità
C = np.vstack([A, B])
C
```

In maniera analoga, siano ${\bf A}$ e ${\bf B}$ due matrici aventi lo stesso numero di righe e definiamo ${\bf C} = \begin{pmatrix}{\bf A} & {\bf B} \end{pmatrix}$.

```{python}
C = np.hstack([A, B])
C
```

## Operazioni sulle matrici III

Siano ${\bf x}$ e ${\bf y}$ due vettori colonna in $\mathbb{R}^p$. Allora, il loro \empb{prodotto incrociato} è pari a

$$ 
{\bf x}^\intercal {\bf y} = \sum_{i=1}^p x_i y_i.
$$

In **Python** possiamo usare il comando `dot`

```{python}
x = np.array([-4, 2, 6, 10, 22])
y = np.array([3, 2, 2, 7, 9])
np.dot(x, y) # Equivalent a sum(x * y)
```

## Operazioni sulle matrici IV

In algebra lineare il **prodotto tra matrici** compatibili ${\bf A} {\bf B}$ è chiamato prodotto righe per colonne. In **Python** si usa il comando seguente

```{python}
A = np.array([[1, 2, 3], [4, 9, 2], [2, 2, 2]])
B = np.array([[5, 2, 5], [3, 3, 7], [-2, -8, 10]])

np.matmul(A, B) # Prodotto righe per colonne AB
```

Se le matrici non sono compatibili **Python** produce un errore (provateci per esercizio!)


**Nota**. Il comando `A * B` indica il prodotto elemento per elemento e non il prodotto righe per colonne.

```{python}
A * B # Prodotto elemento per elemento
```

## Operazioni sulle matrici V

Sia ${\bf A}$ una matrice quadrata $n \times n$ a valori reali. La sua **matrice inversa** ${\bf A}^{-1}$, quando esiste, è l'unica matrice tale per cui

$$
{\bf A} {\bf A}^{-1} = {\bf A}^{-1} {\bf A} =  I_n.
$$

Per ottenere ${\bf A}^{-1}$ si usa il comando `solve`.

```{python}
A = np.array([[1, 2, 3], [4, 9, 2], [2, 2, 2]])
A1 = np.linalg.inv(A) # Matrice inversa di A
A1
```

```{python}
np.around(np.matmul(A, A1), 5) # Operazione di controllo
```

```{python}
np.linalg.det(A) # Calcola il determinante della matrice A
```

## Operazioni sulle matrici VI

Nel caso una matrice non sia invertibile, il **determinante** è pari a $0$. Il comando `inv` in quel caso produce un errore.

```{python}
# Esempio di matrice NON invertibile
A = np.array([[1, 2, 3], [2, 4, 6], [2, 2, 2]])
np.linalg.det(A) # Deteminante pari a 0, np.linalg.inv(A) produce un errore
```

Ci sono numerose funzioni per la **scomposizione di matrici**, il cui output è a volte una **lista**.

```{python}
A = np.array([[4, 1], [1, 8]])
np.linalg.cholesky(A) # Scomposizione di Cholesky
```


```{python}
np.linalg.qr(A) # Scomposizione QR
```


```{python}
np.linalg.eig(A)
```